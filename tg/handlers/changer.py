import asyncio
import random
from aiogram import Router, Bot, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from tg.models import TelegramUser, Invoice, Req
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async
from aiogram.filters import Command, CommandObject

from tg.text import admin_text

router = Router()


class InvoiceAmountState(StatesGroup):
    awaiting_amount = State()


@router.callback_query(F.data.startswith("accept_inv_"))
async def accept_inv(call: CallbackQuery, state: FSMContext):
    data = call.data.split("_")
    invoice = await sync_to_async(Invoice.objects.get)(id=data[2])
    await state.update_data(invoice_id=invoice.id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(InvoiceAmountState.awaiting_amount)


@router.message(InvoiceAmountState.awaiting_amount)
async def invoice_amount(msg: Message, state: FSMContext):
    try:
        data = await state.get_data()
        invoice_id = data.get("invoice_id")
        invoice = await sync_to_async(Invoice.objects.get)(id=invoice_id)
        amount = int(msg.text)
        if invoice.amount == amount:
            invoice.amount = amount
            invoice.is_complete = True
            invoice.save()
            await msg.answer(f"–ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç {amount} –¢")
            await state.clear()
        else:
            await msg.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—Ä–∏–º–∏—Ç–µ –∏–Ω–≤–æ–π—Å –∑–∞–Ω–æ–≤–æ!")
            await state.clear()
    except Exception as e:
        print(e)


class IdState(StatesGroup):
    awaiting_id = State()
    awaiting_desc = State()
    awaiting_photo = State()
    chat_with_admin = State()

@router.message(Command("start"))
async def start(msg: Message, command: CommandObject, state: FSMContext):
    user, created = await sync_to_async(TelegramUser.objects.get_or_create)(user_id=msg.from_user.id)
    user.first_name = msg.from_user.first_name
    user.last_name = msg.from_user.last_name
    user.username = msg.from_user.username
    user.save()
    if not user.is_exchanger:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏:")
        await state.set_state(IdState.awaiting_id)
        await state.update_data(user_id=user.user_id)


@router.message(IdState.awaiting_id)
async def awaiting_id(msg: Message, state: FSMContext):
    try:
        invoice = await sync_to_async(Invoice.objects.get)(uniq_id=msg.text)
        await msg.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø–æ –∑–∞—è–≤–∫–µ {invoice.uniq_id}")
        await state.update_data(uniq=invoice.uniq_id)
        await state.set_state(IdState.awaiting_desc)
    except Exception as e:
        await msg.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ ID –∑–∞—è–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(IdState.awaiting_desc)
async def awaiting_desc(msg: Message, state: FSMContext):
    if msg.text:
        data = await state.get_data()
        uniq = data.get("uniq")
        await msg.answer(f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ –∑–∞—è–≤–∫–µ {uniq}:")
        await state.update_data(desc=msg.text)
        await state.set_state(IdState.awaiting_photo)
    else:
        await msg.answer("–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–ª–æ–º–∞—Ç—å –º–µ–Ω—è!")


@router.message(IdState.awaiting_photo)
async def awaiting_photo(msg: Message, state: FSMContext, bot: Bot):
    if msg.photo or msg.document:
        data = await state.get_data()
        client_id = data.get("user_id")
        uniq_id = data.get("uniq")
        invoice = await sync_to_async(Invoice.objects.get)(uniq_id=uniq_id)
        description = data.get("desc")
        admin = await sync_to_async(TelegramUser.objects.filter)(is_admin=True)
        admin = admin.first()
        await msg.forward(admin.user_id)
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_to_{client_id}"))
        await bot.send_message(chat_id=admin.user_id, text=admin_text.format(
            client_id=client_id, bot=invoice.bot_user, uniq_id=uniq_id, desc=description), reply_markup=builder.as_markup())
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å")]], resize_keyboard=True)
        await msg.answer("–ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...", reply_markup=keyboard)
        await state.set_state(IdState.chat_with_admin)
    else:
        await msg.answer(f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:")


@router.message(IdState.chat_with_admin)
async def chat_with_admin(msg: Message, state: FSMContext, bot: Bot):
    if msg.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å":
        await msg.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        await state.clear()
    else:
        data = await state.get_data()
        client_id = data.get("user_id")
        uniq_id = data.get("uniq")
        invoice = await sync_to_async(Invoice.objects.get)(uniq_id=uniq_id)
        description = data.get("desc")
        admin = await sync_to_async(TelegramUser.objects.filter)(is_admin=True)
        admin = admin.first()
        await msg.forward(admin.user_id)
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_to_{client_id}"))
        await bot.send_message(chat_id=admin.user_id, text=admin_text.format(
            client_id=client_id, bot=invoice.bot_user, uniq_id=uniq_id, desc=description),
                               reply_markup=builder.as_markup())


class AdminAnswer(StatesGroup):
    awaiting_text = State()


@router.callback_query(F.data.startswith("answer_to_"))
async def answer_to_client(call: CallbackQuery, state: FSMContext):
    data = call.data.split("_")
    client_id = data[2]
    await state.set_state(AdminAnswer.awaiting_text)
    await state.update_data(client_id=client_id)
    await state.set_state(AdminAnswer.awaiting_text)
    await call.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")


@router.message(AdminAnswer.awaiting_text)
async def awaiting_text(msg: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    client_id = data.get("client_id")
    await bot.send_message(text=msg.text, chat_id=client_id)
    await msg.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.text}")

@router.message(Command("req"))
async def manage_reqs(msg: Message):
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    reqs = await sync_to_async(Req.objects.filter)(user=user)
    builder = InlineKeyboardBuilder()
    if reqs:
        for i in reqs:
            builder.add(InlineKeyboardButton(text=f"{'üü¢' if i.is_active else 'üî¥'} {i.name}", callback_data=f"manage_req_{i.id}"))
    builder.row(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç", callback_data="add_new_req"))
    builder.adjust(1)
    await msg.answer("–†–µ–∫–≤–∏–∑–∏—Ç—ã:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("manage_req_"))
async def manage_req(call: CallbackQuery):
    data = call.data.split("_")
    req = await sync_to_async(Req.objects.get)(id=data[2])
    if req.is_active:
        req.is_active = False
    if not req.is_active:
        req.is_active = True
    req.save()
    user = await sync_to_async(TelegramUser.objects.get)(user_id=call.from_user.id)
    reqs = await sync_to_async(Req.objects.filter)(user=user)
    builder = InlineKeyboardBuilder()
    if reqs:
        for i in reqs:
            builder.add(InlineKeyboardButton(text=f"{'üü¢' if i.is_active else 'üî¥'} {i.name}",
                                             callback_data=f"manage_req_{i.id}"))
    builder.row(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç", callback_data="add_new_req"))
    builder.adjust(1)
    await call.message.edit_text("–†–µ–∫–≤–∏–∑–∏—Ç—ã:", reply_markup=builder.as_markup())

class AddNewReq(StatesGroup):
    awaiting_bank = State()
    awaiting_name = State()
    awaiting_req = State()

@router.callback_query(F.data == "add_new_req")
async def add_new_req(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
    await state.set_state(AddNewReq.awaiting_bank)

@router.message(AddNewReq.awaiting_bank)
async def awaiting_bank(msg: Message, state: FSMContext):
    await state.update_data(bank=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞, –æ–Ω–∞ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–∞–º –∏ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑–ª–∏—á–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:")
    await state.set_state(AddNewReq.awaiting_name)

@router.message(AddNewReq.awaiting_name)
async def awaiting_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã):")
    await state.set_state(AddNewReq.awaiting_req)

@router.message(AddNewReq.awaiting_req)
async def awaiting_req(msg: Message, state: FSMContext):
    data = await state.get_data()
    bank = data.get("bank")
    name = data.get("name")
    req = msg.text
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    new_req = await sync_to_async(Req.objects.create)(bank=bank, name=name, req=req, user=user)
    await msg.answer("–ù–æ–≤—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç —Å–æ–∑–¥–∞–Ω!\n"
                     f"{bank}\n{name}\n{req}")